name: Deploy - Demos
run-name: ${{ inputs.is_production && '🚀' || '🧪' }} Deploy - Demos

on:
  workflow_dispatch:
    inputs:
      is_production:
        type: boolean
        description: Is production deployment

jobs:
  deployment:
    runs-on: ubuntu-latest
    env:
      STAG_DIR: ${{ secrets.PROD_DIR }}staging/
      DEPLOY_DIR: ${{ secrets.PROD_DIR }}${{ !inputs.is_production && 'staging/' || '' }}
      DEMO_FILES: .nuxt/,.output,public,server,nuxt.config.ts,package.json
      NUXT_APP_BASE_URL: /vuexy-nuxtjs-admin-template/${{ !inputs.is_production && 'staging/' || '' }}demo/
      NUXT_PUBLIC_APP_DOMAIN: https://demos.pixinvent.com
      NUXT_PUBLIC_API_BASE_URL: /vuexy-nuxtjs-admin-template/${{ !inputs.is_production && 'staging/' || '' }}demo/api
    steps:
      - run: echo ${{ env.DEMO_FILES }}
      - name: ⚙️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
            
      - name: ⚙️ Set BRAND_NAME environment variable from repo name
        run: echo BRAND_NAME=${{ github.event.repository.name }} | cut -d '-' -f1 >> $GITHUB_ENV

      - name: ⬇️ Checkout template
        uses: actions/checkout@v3
        with:
          path: ${{ env.BRAND_NAME }}/nuxt

      - name: ⬇️ Install packages in typescript full version
        working-directory: ${{ env.BRAND_NAME }}/nuxt/typescript-version/full-version
        run: pnpm i

      - name: build
        working-directory: ${{ env.BRAND_NAME }}/nuxt/typescript-version/full-version
        run: NUXT_APP_BASE_URL=${{ env.NUXT_APP_BASE_URL }} NUXT_PUBLIC_APP_DOMAIN=${{ env.NUXT_PUBLIC_APP_DOMAIN }} NUXT_PUBLIC_API_BASE_URL=${{ env.NUXT_PUBLIC_API_BASE_URL }} pnpm build


      - name: 🏋️ Move demo files to github workspace dir and in random dir
        working-directory: ${{ env.BRAND_NAME }}/nuxt/typescript-version/full-version
        run: |
          # Create path for random demo dir
          DEMO_DIR_NAME=demo-$RANDOM

          # Add DEMO_DIR_NAME to GitHub env
          # ❗ Don't use `${{ env.DEMO_DIR_NAME }}` in this step because workflow will inject env from next step
          echo "DEMO_DIR_NAME=$DEMO_DIR_NAME" >> $GITHUB_ENV

          # Create random dir in workspace root
          mkdir -p $GITHUB_WORKSPACE/$DEMO_DIR_NAME

          # Move demo files to random dir
          mv $(echo ${{ env.DEMO_FILES }} | sed 's/,/ /g') $GITHUB_WORKSPACE/$DEMO_DIR_NAME

      - run: echo ${{ env.DEMO_DIR_NAME }}

      - name: 🚀 Upload demo zip
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.SSHKEY }}
          source: ${{ env.DEMO_DIR_NAME }}
          target: /tmp

      - name: 🗄️ Cleanup & Backup
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.SSHKEY }}
          script: |
            # Load the required nvm environment, other paths, etc
            # Why? => https://github.com/appleboy/ssh-action/issues/21#issuecomment-574050424
            export NVM_DIR=~/.nvm
            source ~/.nvm/nvm.sh

            # Ensure deploy dir exists
            mkdir -p ${{ env.DEPLOY_DIR }}

            # Move uploaded demo dir to deployment dir
            mv /tmp/${{ env.DEMO_DIR_NAME }} ${{ env.DEPLOY_DIR }}

            cd ${{ env.DEPLOY_DIR }}

            # Remove existing backup
            rm -rf demo-backup-*.zip

            # Create zip name shell variable
            DEMO_ZIP_NAME="demo-backup-$(date +"%Y-%m-%d-%H-%M-%S").zip"

            # If production => remove staging/demo dir and create zip of existing demo
            [[ "${{ inputs.is_production }}" == "true" ]] && rm -rf ${{ env.STAG_DIR }}/demo && zip -r $DEMO_ZIP_NAME demo

            # Set shell variable for pm2 app name
            PM2_APP_NAME=${{ env.BRAND_NAME }}-nuxt${{ !inputs.is_production && '-staging' || '' }}

            # Stop pm2 process
            pm2 stop ${{ secrets.PM2_CONFIG_FILE }} --only $PM2_APP_NAME

            # Remove existing demo dir
            rm -rf demo

            # Rename random demo dir to demo
            mv ${{ env.DEMO_DIR_NAME }} demo

            # Start pm2 process
            pm2 start ${{ secrets.PM2_CONFIG_FILE }} --only $PM2_APP_NAME --env production
