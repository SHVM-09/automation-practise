name: Deploy - Demos
run-name: ${{ inputs.is_production && 'üöÄ' || 'üß™' }} Deploy - Demos

on:
  workflow_dispatch:
    inputs:
      is_production:
        type: boolean
        description: Is production deployment

jobs:
  deployment:
    runs-on: ubuntu-latest
    env:
      STAG_DIR: ${{ secrets.PROD_DIR }}staging/
      DEPLOY_DIR: ${{ secrets.PROD_DIR }}${{ !inputs.is_production && 'staging/' || '' }}
    steps:
      - name: ‚öôÔ∏è Set TEMPLATE_NAME environment variable from repo name
        run: echo TEMPLATE_NAME=${{ github.event.repository.name }} | cut -d '-' -f1 >> $GITHUB_ENV

      - name: ‚¨áÔ∏è Clone current repo under /<template-name>/vue-laravel
        uses: actions/checkout@v3
        with:
          path: ${{ env.TEMPLATE_NAME }}/vue-laravel

      - name: ‚¨áÔ∏è Clone automation scripts repo under /automation-scripts
        uses: actions/checkout@v3
        with:
          repository: themeselection/automation-scripts
          token: ${{ secrets.GH_PAT }}
          path: automation-scripts
      
      - name: ‚¨áÔ∏è Install packages in automation-scripts dir
        working-directory: automation-scripts/vue
        run: yarn

      - name: ‚¨áÔ∏è Install packages in typescript full version
        working-directory: ${{ env.TEMPLATE_NAME }}/vue-laravel/typescript-version/full-version
        run: yarn && composer install
        
      - name: üé≠ Create .env file from .env.example & generate APP_KEY via `php artisan key:generate`
        working-directory: ${{ env.TEMPLATE_NAME }}/vue-laravel/typescript-version/full-version
        run: cp .env.example .env && php artisan key:generate

      - name: üì¶ Generate demos
        working-directory: automation-scripts/vue
        run: yarn tsx src/templates/${{ env.TEMPLATE_NAME }}/scripts/genLaravelDemos.ts $([[ "${{ inputs.is_production }}" != "true" ]] && echo --staging)

      - name: üöÄ Upload demos zip
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.SSHKEY }}
          source: ${{ env.TEMPLATE_NAME }}/vue-laravel/typescript-version/full-version/*.zip
          target: ${{ secrets.LARAVEL_CORE_CONTAINER_DIR }}
          strip_components: 4

      - name: ü™Ñ Setup demos
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.SSHKEY }}
          script: |
            # create deployment dir if doesn't exist
            mkdir -p ${{ env.DEPLOY_DIR }}

            # navigate to laravel core container dir
            cd ${{ secrets.LARAVEL_CORE_CONTAINER_DIR }}

            # Remove existing backup zip
            rm -rf bak-${{ env.TEMPLATE_NAME }}*.zip

            # if prod => remove staging data & zip existing laravel core
            DEMO_ZIP_NAME="bak-${{ env.TEMPLATE_NAME }}-laravel-$(date +"%Y-%m-%d-%H-%M-%S").zip"
            [[ "${{ inputs.is_production }}" == "true" ]] && rm -rf ${{ env.STAG_DIR }}/demo-* && rm -rf ${{ env.TEMPLATE_NAME }}-*staging* && zip -r $DEMO_ZIP_NAME ${{ env.TEMPLATE_NAME }}-* -x "*.zip"
            
            # if prod => remove existing laravel core & NOT UPLOADED ZIP (via `-type d`)
            [[ "${{ inputs.is_production }}" == "true" ]] && rm -rf $(find ${{ env.TEMPLATE_NAME }}* -type d -maxdepth 0)
            
            # remove existing demos
            rm -rf ${{ env.DEPLOY_DIR }}/demo-*
            
            # unzip the uploaded laravel core. "-q" option will silently unzip without logs
            unzip -q ${{ env.TEMPLATE_NAME }}-*.zip
            
            # remove the uploaded zip
            rm -rf ${{ env.TEMPLATE_NAME }}*.zip
                        
            # ATM, we have successfully, uploaded the zip to server with file cleanup. Next, just move the demo in its place
            
            mv ${{ env.TEMPLATE_NAME }}*/demo-* ${{ env.DEPLOY_DIR }}
            
            # create logs dir & laravel.log file in laravel core if doesn't exist. We are doing "echo ls $" because if we don't, "mkdir -p" will create dir as "materio*" instead of full name "materio-xxx"
            mkdir -p $(echo ${{ env.TEMPLATE_NAME }}-*)/storage/logs/ && touch $(echo ${{ env.TEMPLATE_NAME }}*)/storage/logs/laravel.log
            
            # grant read & write permission to group & other. We have to explicitly tell command to only apply on staging dir if we are on staging
            # because when deploying staging, command without staging suffix also modify permission for production laravel core that in turns throws permission error for file that is auto generated by laravel
            chmod -R g+rw ${{ env.TEMPLATE_NAME }}*$([[ "${{ inputs.is_production }}" != "true" ]] && echo staging)/storage
